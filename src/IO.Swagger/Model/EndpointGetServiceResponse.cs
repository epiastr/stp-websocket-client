/* 
 * Realtime Notification Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Realtime Notification Configuration Response
    /// </summary>
    [DataContract]
    public partial class EndpointGetServiceResponse :  IEquatable<EndpointGetServiceResponse>, IValidatableObject
    {
        /// <summary>
        /// SUCCESS for successful requests BUSINESSERROR if a business is blocked by the rule. SECURITYERROR if it is attached to security or authorization control, SYSTEMERROR if there is a system error.
        /// </summary>
        /// <value>SUCCESS for successful requests BUSINESSERROR if a business is blocked by the rule. SECURITYERROR if it is attached to security or authorization control, SYSTEMERROR if there is a system error.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultTypeEnum
        {
            
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 1,
            
            /// <summary>
            /// Enum BUSINESSERROR for value: BUSINESSERROR
            /// </summary>
            [EnumMember(Value = "BUSINESSERROR")]
            BUSINESSERROR = 2,
            
            /// <summary>
            /// Enum SYSTEMERROR for value: SYSTEMERROR
            /// </summary>
            [EnumMember(Value = "SYSTEMERROR")]
            SYSTEMERROR = 3,
            
            /// <summary>
            /// Enum SECURITYERROR for value: SECURITYERROR
            /// </summary>
            [EnumMember(Value = "SECURITYERROR")]
            SECURITYERROR = 4
        }

        /// <summary>
        /// SUCCESS for successful requests BUSINESSERROR if a business is blocked by the rule. SECURITYERROR if it is attached to security or authorization control, SYSTEMERROR if there is a system error.
        /// </summary>
        /// <value>SUCCESS for successful requests BUSINESSERROR if a business is blocked by the rule. SECURITYERROR if it is attached to security or authorization control, SYSTEMERROR if there is a system error.</value>
        [DataMember(Name="resultType", EmitDefaultValue=false)]
        public ResultTypeEnum ResultType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointGetServiceResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EndpointGetServiceResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointGetServiceResponse" /> class.
        /// </summary>
        /// <param name="ResultCode">0 for successful requests. For unsuccessful requests, this value contains the error code. (required).</param>
        /// <param name="ResultDescription">Returns OK if successful or error description otherwise. (required).</param>
        /// <param name="ResultType">SUCCESS for successful requests BUSINESSERROR if a business is blocked by the rule. SECURITYERROR if it is attached to security or authorization control, SYSTEMERROR if there is a system error. (required).</param>
        /// <param name="TransactionId">SUCCESS for successful requests BUSINESSERROR if a business is blocked by the rule. SECURITYERROR if it is attached to security or authorization control, SYSTEMERROR if there is a system error..</param>
        /// <param name="Body">Body.</param>
        public EndpointGetServiceResponse(string ResultCode = default(string), string ResultDescription = default(string), ResultTypeEnum ResultType = default(ResultTypeEnum), string TransactionId = default(string), EndpointResponse Body = default(EndpointResponse))
        {
            // to ensure "ResultCode" is required (not null)
            if (ResultCode == null)
            {
                throw new InvalidDataException("ResultCode is a required property for EndpointGetServiceResponse and cannot be null");
            }
            else
            {
                this.ResultCode = ResultCode;
            }
            // to ensure "ResultDescription" is required (not null)
            if (ResultDescription == null)
            {
                throw new InvalidDataException("ResultDescription is a required property for EndpointGetServiceResponse and cannot be null");
            }
            else
            {
                this.ResultDescription = ResultDescription;
            }
            // to ensure "ResultType" is required (not null)
            if (ResultType == null)
            {
                throw new InvalidDataException("ResultType is a required property for EndpointGetServiceResponse and cannot be null");
            }
            else
            {
                this.ResultType = ResultType;
            }
            this.TransactionId = TransactionId;
            this.Body = Body;
        }
        
        /// <summary>
        /// 0 for successful requests. For unsuccessful requests, this value contains the error code.
        /// </summary>
        /// <value>0 for successful requests. For unsuccessful requests, this value contains the error code.</value>
        [DataMember(Name="resultCode", EmitDefaultValue=false)]
        public string ResultCode { get; set; }

        /// <summary>
        /// Returns OK if successful or error description otherwise.
        /// </summary>
        /// <value>Returns OK if successful or error description otherwise.</value>
        [DataMember(Name="resultDescription", EmitDefaultValue=false)]
        public string ResultDescription { get; set; }


        /// <summary>
        /// SUCCESS for successful requests BUSINESSERROR if a business is blocked by the rule. SECURITYERROR if it is attached to security or authorization control, SYSTEMERROR if there is a system error.
        /// </summary>
        /// <value>SUCCESS for successful requests BUSINESSERROR if a business is blocked by the rule. SECURITYERROR if it is attached to security or authorization control, SYSTEMERROR if there is a system error.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public EndpointResponse Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointGetServiceResponse {\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  ResultDescription: ").Append(ResultDescription).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointGetServiceResponse);
        }

        /// <summary>
        /// Returns true if EndpointGetServiceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointGetServiceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointGetServiceResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResultCode == input.ResultCode ||
                    (this.ResultCode != null &&
                    this.ResultCode.Equals(input.ResultCode))
                ) && 
                (
                    this.ResultDescription == input.ResultDescription ||
                    (this.ResultDescription != null &&
                    this.ResultDescription.Equals(input.ResultDescription))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResultCode != null)
                    hashCode = hashCode * 59 + this.ResultCode.GetHashCode();
                if (this.ResultDescription != null)
                    hashCode = hashCode * 59 + this.ResultDescription.GetHashCode();
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
